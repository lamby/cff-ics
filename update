#!/usr/bin/env python3
#
# https://icalendar.readthedocs.io/en/latest/usage.html#example

import datetime
import json
import logging
import re

import click
import icalendar
import pytz
import requests
import slugify
import yaml

from bs4 import BeautifulSoup
from rich.logging import RichHandler
from rich.progress import track

logging.basicConfig(
    level=logging.INFO, format="%(message)s", datefmt="[%X]", handlers=[RichHandler()]
)

re_collapse_newlines = re.compile(r"\n+")


class SiffICS:
    PADDING = 10  # minutes
    START = datetime.date.today() - datetime.timedelta(days=2)
    DAYS = 10
    LOCAL_TIMEZONE = pytz.timezone("America/Los_Angeles")
    BASE_URL = "https://www.siff.net/calendar?view=list&date="

    def __init__(self):
        self.session = requests.Session()

    def main(self):
        # Parse events
        self.events = []
        for x in track(range(self.DAYS + 1)):
            date = self.START + datetime.timedelta(days=x)
            self.populate_events_for_date(date)
        logging.info(f"Found {len(self.events)} total events")

        self.post_process_events()

        # Parse venues
        self.venues = {}
        for event in self.events:
            if event["VenueSlug"] in self.venues:
                continue
            self.venues[event["VenueSlug"]] = {
                x: y for x, y in event.items() if x.startswith("Venue")
            }

        logging.info(f"Found {len(self.venues)} total venues")

        # Write calendars
        for slug, venue in self.venues.items():
            events = [x for x in self.events if x["VenueSlug"] == venue["VenueSlug"]]

            ics = self.get_ics(events, venue["VenueName"])

            with open(f"ics/{slug}.ics", "w") as f:
                f.write(ics)

        # Write an "all events" calendar, too
        with open(f"ics/all.ics", "w") as f:
            f.write(self.get_ics(self.events, "all venues"))

        # Write venues
        venues = sorted(self.venues.values(), key=lambda x: x["VenueName"])
        with open(f"_data/venues.yaml", "w") as f:
            f.write(yaml.dump(list(venues)))

    def post_process_events(self):
        logging.info(f"Calculating further film metadata")

        by_title = {}  # str -> [dict]
        for x in self.events:
            by_title.setdefault(x["EventName"], []).append(x)

        # Add film counts
        for xs in track(by_title.values()):
            logging.info(f"Downloading data for {xs[0]['EventName']} …")

            r = self.session.get(xs[0]["Url"])
            r.raise_for_status()

            soup = BeautifulSoup(r.content, "html.parser")

            # Body text
            body = soup.select("div.body-copy")[0].get_text()
            body = body.strip()
            body = re_collapse_newlines.sub(" ", body).strip()

            for idx, x in enumerate(xs):
                x["EventBody"] = body

    def populate_events_for_date(self, date):
        date_fmt = date.strftime("%Y-%m-%d")
        logging.info(f"Getting events for {date_fmt} …")

        r = self.session.get(
            "{}{}".format(self.BASE_URL, date_fmt),
        )
        r.raise_for_status()

        soup = BeautifulSoup(r.content, "html.parser")

        for elem in soup.select("a.elevent"):
            data = json.loads(elem["data-screening"])
            if data["VenueName"] == "Virtual":
                continue
            name = data["VenueName"].partition("| ")[2].strip()
            data.update(
                {
                    "VenueName": name,
                    "VenueSlug": slugify.slugify(name),
                    "Url": "https://www.siff.net{}".format(
                        elem.parent.parent.parent.select("a")[0]["href"]
                    ),
                }
            )
            self.events.append(data)

    def get_ics(self, events, venue_name):
        logging.info(f"Updating for {venue_name}")

        name = f"SIFF 2023 ({venue_name})"

        cal = icalendar.Calendar()
        cal.add("prodid", "-//icalendar//mxm.dk//")
        cal.add("version", "2.0")
        cal.add("name", name)
        cal.add("x-wr-calname", name)
        cal.add("last-modified", datetime.datetime.utcnow())

        def get_datetime(raw):
            # '/Date(1683856800000)/'
            timestamp = int(raw[6:-5])

            return datetime.datetime.fromtimestamp(timestamp, tz=datetime.timezone.utc)

        for x in events:
            event = icalendar.Event()

            # Overview
            event.add("uid", x["ShowtimeId"])
            event.add("summary", x["EventName"])
            event.add(
                "location",
                f"{x['VenueName']}, {x['VenueAddress1']}",
            )

            # Calculate times
            start = get_datetime(x["Showtime"])
            runtime = int(x["LengthInMinutes"])
            end = start + datetime.timedelta(
                minutes=self.PADDING + self.round_to_nearest(runtime, 5)
            )
            event.add("dtstamp", start)
            event.add("dtstart", start)
            event.add("dtend", end)

            # Description
            description = []
            hours, minutes = divmod(runtime, 60)
            description.append(f"Duration: {runtime} mins ({hours}h{minutes:02d}m)")
            description.append(x["EventBody"])
            description.append(x["Url"])
            event.add("description", "\n\n".join(description))

            cal.add_component(event)

        return cal.to_ical().decode("utf-8")

    def round_to_nearest(self, val, nearest_to):
        return (val + (nearest_to - 1)) // nearest_to * nearest_to


@click.command()
def main():
    SiffICS().main()


if __name__ == "__main__":
    main()
