#!/usr/bin/env python3
#
# https://icalendar.readthedocs.io/en/latest/usage.html#example

import datetime
import hashlib
import logging
import os
import re

from urllib.parse import urlparse, parse_qs

import click
import icalendar
import pytz
import requests

from bs4 import BeautifulSoup
from rich.logging import RichHandler
from rich.progress import track
from dateutil.parser import parse
from xdg.BaseDirectory import save_cache_path

logging.basicConfig(
    level=logging.DEBUG, format="%(message)s", datefmt="[%X]", handlers=[RichHandler()]
)


class CffICS:
    PADDING = 15  # minutes
    LOCAL_TIMEZONE = pytz.timezone("Europe/London")

    def __init__(self):
        self.session = requests.Session()
        self.films = []

    def main(self):
        for url in track(self.get_film_urls()):
            self.parse_film(url)

        with open("ics/cff.ics", "w") as f:
            f.write(self.get_ics())

    def get_soup(self, url):
        h = hashlib.sha1()
        h.update(url.encode("utf-8"))

        path = "{}.html".format(os.path.join(save_cache_path("cff"), h.hexdigest()))

        if os.path.exists(path):
            with open(path, "rb") as f:
                content = f.read()

            logging.debug(f"Using saved contents from {path} over downloading {url}")
        else:
            r = self.session.get(url)
            r.raise_for_status()
            content = r.content
            with open(path, "wb") as f:
                f.write(content)

        return BeautifulSoup(content, "html.parser")

    def get_film_urls(self):
        result = set()

        soup = self.get_soup("https://www.cambridgefilmfestival.org.uk/whats-on")

        for elem in soup.select("article.film-item a"):
            url = elem["href"]

            if not url.startswith("http"):
                url = f"https://www.cambridgefilmfestival.org.uk/{url}"

            result.add(url)

        logging.info(f"Found {len(result)} total films")

        return list(sorted(result))

    def parse_film(self, url):
        soup = self.get_soup(url)

        year = None
        runtime = None
        for elem in soup.select("ul.screening-details li"):
            val = elem.get_text()
            if val.startswith("Run time: "):
                runtime = int(val.split(" ")[2])
            if val.startswith("Release year: "):
                try:
                    year = int(val.split(" ")[2])
                except ValueError:
                    pass

        title = soup.select_one("h1.film-title").get_text(strip=True)
        synopsis = soup.select_one(".film-details__synopsis").get_text().strip()

        for pat, repl in (
            (r"\xa0", " "),
            ("Synopsis\n", ""),
            ("Original Title: .*\n", ""),
            (r"\n+", ""),
            (r"\s*Part of .*", ""),
        ):
            synopsis = re.sub(pat, repl, synopsis)

        if runtime is None:
            runtime = 100
            logging.warning(f"No runtime for {title}; defaulting to {runtime} minutes")

        film = {
            "title": title,
            "year": year,
            "synopsis": synopsis,
            "runtime": runtime,
            "screenings": [],
            "url": url,
        }

        # logging.debug(f"Found {title} at {url}")

        for x in soup.select("ul.film-screening-list a"):
            screening_url = x["href"]

            if title == "Typist Artist Pirate King" and x.get_text(
                strip=True
            ).startswith("Thu, 19/10/2023 - 20:20"):
                screening_url = "https://ticketing.picturehouses.com/Ticketing/visSelectTickets.aspx?cinemacode=002&txtSessionId=48478&visLang=1"

            if not screening_url:
                logging.warning(
                    f"Empty screening URL for {title} at {url}"
                )
                continue

            film["screenings"].append(self.parse_screening(screening_url))

        assert film["runtime"]
        assert film["screenings"]

        self.films.append(film)

    def parse_screening(self, url):
        soup = self.get_soup(url)

        val = soup.select_one("div.session-overview-line.session-time").get_text()
        val = val.replace("Showing on ", "")
        start = parse(val).replace(tzinfo=self.LOCAL_TIMEZONE)

        uid = parse_qs(urlparse(url).query)["txtSessionId"][0]
        screen = soup.select_one(".cinema-screen-name").get_text()[-1]

        return {
            "start": start,
            "screen": screen,
            "url": url,
            "uid": uid,
        }

    def get_ics(self):
        name = "Cambridge Film Festival"

        cal = icalendar.Calendar()
        cal.add("prodid", "-//icalendar//mxm.dk//")
        cal.add("version", "2.0")
        cal.add("name", name)
        cal.add("x-wr-calname", name)
        cal.add("last-modified", datetime.datetime.utcnow())

        for film in self.films:
            for idx, screening in enumerate(film["screenings"]):
                event = icalendar.Event()

                # Overview
                event.add("uid", screening["uid"])
                event.add("summary", film["title"])
                event.add(
                    "location",
                    "Arts Picturehouse, 38-39 St Andrew's St, Cambridge CB2 3AR",
                )

                # Calculate times
                runtime = film["runtime"]
                end = screening["start"] + datetime.timedelta(
                    minutes=self.PADDING + self.round_to_nearest(runtime, 5)
                )
                event.add("dtstamp", screening["start"])
                event.add("dtstart", screening["start"])
                event.add("dtend", end)

                # Description
                description = []
                hours, minutes = divmod(runtime, 60)
                description.append(f"Duration: {runtime} mins ({hours}h{minutes:02d}m)\nScreen: {screening['screen']}")
                description.append(film["synopsis"])

                if len(film["screenings"]) > 1:
                    val = "Also playing on:"
                    for idx_, screening_ in enumerate(film["screenings"]):
                        if idx == idx_:
                            continue
                        val += "\nâ€¢ {} (Screen {})".format(
                            screening_["start"].strftime("%A %d %B, %-I:%M %p"),
                            screening_["screen"],
                        )
                    description.append(val)

                description.append(film["url"])
                description.append(screening["url"])
                event.add("description", "\n\n".join(description))

                cal.add_component(event)

        return cal.to_ical().decode("utf-8")

    def round_to_nearest(self, val, nearest_to):
        return (val + (nearest_to - 1)) // nearest_to * nearest_to


@click.command()
def main():
    CffICS().main()


if __name__ == "__main__":
    main()
